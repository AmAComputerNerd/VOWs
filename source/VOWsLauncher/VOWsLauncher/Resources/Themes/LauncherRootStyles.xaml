<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!--Theme Pallette:
        - Black: https://coolors.co/palette/262626-1e1e1e-dddddd-c6c6c6-4084a3
        - Dark: https://coolors.co/palette/474747-3d3d3d-cccccc-b8b8b8-5da1c0 
        - Light: https://coolors.co/palette/ebebeb-e0e0e0-333333-1f1f1f-89bbd1
        - White: https://coolors.co/palette/ffffff-f5f5f5-141414-0a0a0a-b6d5e2
    -->

    <Style x:Key="ThemedBorder"
           TargetType="Border">

        <Style.Setters>
            <Setter Property="Background" Value="#3d3d3d"/>
        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Background" Value="#1e1e1e"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Background" Value="#3d3d3d"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Background" Value="#e0e0e0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Background" Value="#f5f5f5"/>
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="ThemedGrid"
           TargetType="Grid">

        <Style.Setters>
            <Setter Property="Background" Value="#353b47"/>
        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Background" Value="#1e1e1e"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Background" Value="#3d3d3d"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Background" Value="#e0e0e0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Background" Value="#f5f5f5"/>
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="ThemedPanel"
           TargetType="StackPanel">

        <Style.Setters>
            <Setter Property="Background" Value="#353b47"/>
        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Background" Value="#1e1e1e"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Background" Value="#3d3d3d"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Background" Value="#e0e0e0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Background" Value="#f5f5f5"/>
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="ThemedShape"
           TargetType="{x:Type Shape}">

        <Style.Setters>
            <Setter Property="Fill" Value="#e0e0e0"/>
            <Setter Property="Stroke" Value="#ebebeb"/>
        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Fill" Value="#f5f5f5"/>
                <Setter Property="Stroke" Value="#ffffff"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Fill" Value="#e0e0e0"/>
                <Setter Property="Stroke" Value="#ebebeb"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Fill" Value="#474747"/>
                <Setter Property="Stroke" Value="#3d3d3d"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Fill" Value="#262626"/>
                <Setter Property="Stroke" Value="#1e1e1e"/>
            </DataTrigger>
        </Style.Triggers>
        
    </Style>
    
    <Style x:Key="WinNavigationButton"
           BasedOn="{StaticResource {x:Type Button}}"
           TargetType="{x:Type Button}">

        <Style.Setters>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid VerticalAlignment="Top"
                              HorizontalAlignment="Center"
                              Background="{TemplateBinding Background}">

                            <TextBlock Text="{TemplateBinding Property=Content}"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center"
                                       FontWeight="Bold"/>

                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Setter Property="Width" Value="20"/>
            <Setter Property="Height" Value="20"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Foreground" Value="#cccccc"/>
            <Setter Property="Background" Value="Transparent"/>
        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Foreground" Value="#dddddd"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Foreground" Value="#cccccc"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Foreground" Value="#333333"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Foreground" Value="#141414"/>
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="TextTitle"
           TargetType="TextBlock">

        <Style.Setters>
            <Setter Property="Foreground" Value="#cccccc"/>
            <Setter Property="FontSize" Value="28"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="Margin" Value="0,0,0,20"/>
        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Foreground" Value="#dddddd"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Foreground" Value="#cccccc"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Foreground" Value="#333333"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Foreground" Value="#141414"/>
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="TextSubtitle"
           TargetType="TextBlock">

        <Style.Setters>
            <Setter Property="Foreground" Value="#cccccc"/>
            <Setter Property="FontSize" Value="20"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="Margin" Value="0,0,0,10"/>
        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Foreground" Value="#dddddd"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Foreground" Value="#cccccc"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Foreground" Value="#333333"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Foreground" Value="#141414"/>
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="Text"
           TargetType="TextBlock">

        <Style.Setters>
            <Setter Property="Foreground" Value="#b8b8b8"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="Margin" Value="0,0,0,5"/>
        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Foreground" Value="#c6c6c6"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Foreground" Value="#b8b8b8"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Foreground" Value="#1F1F1F"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Foreground" Value="#0A0A0A"/>
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="MenuButton"
           TargetType="Button">

        <Style.Setters>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid VerticalAlignment="Stretch"
                              HorizontalAlignment="Stretch"
                              Background="{TemplateBinding Background}">

                            <TextBlock Text="{TemplateBinding Property=Content}"
                                       VerticalAlignment="Center"
                                       Margin="50,0,0,0"/>

                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Setter Property="Foreground" Value="#cccccc"/>
            <Setter Property="Background" Value="#3d3d3d"/>
            <Setter Property="BorderBrush" Value="#3d3d3d"/>
            <Setter Property="BorderThickness" Value="1"/>

        </Style.Setters>

        <Style.Triggers>

            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Background" Value="#1e1e1e"/>
                <Setter Property="Foreground" Value="#dddddd"/>
                <Setter Property="BorderBrush" Value="#1e1e1e"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Background" Value="#3d3d3d"/>
                <Setter Property="Foreground" Value="#cccccc"/>
                <Setter Property="BorderBrush" Value="#3d3d3d"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Background" Value="#e0e0e0"/>
                <Setter Property="Foreground" Value="#333333"/>
                <Setter Property="BorderBrush" Value="#e0e0e0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Background" Value="#f5f5f5"/>
                <Setter Property="Foreground" Value="#141414"/>
                <Setter Property="BorderBrush" Value="#f5f5f5"/>
            </DataTrigger>

            <!--Theming triggers for the IsMouseOver event, as well as the theme.-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Black"/>
                    <!--The condition for IsMouseOver couldn't be defined the simple way, so we need to use this convoluted Binding to access the property.-->
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="BorderBrush" Value="#4084a3"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Dark"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="BorderBrush" Value="#5da1c0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Light"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="BorderBrush" Value="#89bbd1"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="White"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="BorderBrush" Value="#b6d5e2"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <!--Theming triggers for the IsPressed event, as well as the theme.-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Black"/>
                    <!--The condition for IsPressed couldn't be defined the simple way, so we need to use this convoluted Binding to access the property.-->
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsPressed}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#262626"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Dark"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsPressed}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#474747"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Light"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsPressed}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#ebebeb"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="White"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsPressed}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#ffffff"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

        </Style.Triggers>

    </Style>

    <Style x:Key="MenuButtonSticky"
           BasedOn="{StaticResource {x:Type ToggleButton}}"
           TargetType="{x:Type RadioButton}">

        <Style.Setters>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RadioButton">
                        <Grid VerticalAlignment="Stretch"
                              HorizontalAlignment="Stretch"
                              Background="{TemplateBinding Background}">

                            <TextBlock Text="{TemplateBinding Property=Content}"
                                       VerticalAlignment="Center"
                                       Margin="50,0,0,0"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Setter Property="Foreground" Value="#cccccc"/>
            <Setter Property="Background" Value="#474747"/>
            <Setter Property="BorderBrush" Value="#3d3d3d"/>
            <Setter Property="BorderThickness" Value="1"/>

        </Style.Setters>

        <Style.Triggers>

            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Background" Value="#1e1e1e"/>
                <Setter Property="Foreground" Value="#dddddd"/>
                <Setter Property="BorderBrush" Value="#1e1e1e"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Background" Value="#3d3d3d"/>
                <Setter Property="Foreground" Value="#cccccc"/>
                <Setter Property="BorderBrush" Value="#3d3d3d"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Background" Value="#e0e0e0"/>
                <Setter Property="Foreground" Value="#333333"/>
                <Setter Property="BorderBrush" Value="#e0e0e0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Background" Value="#f5f5f5"/>
                <Setter Property="Foreground" Value="#141414"/>
                <Setter Property="BorderBrush" Value="#f5f5f5"/>
            </DataTrigger>

            <!--Theming triggers for the IsMouseOver event, as well as the theme.-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Black"/>
                    <!--The condition for IsMouseOver couldn't be defined the simple way, so we need to use this convoluted Binding to access the property.-->
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="BorderBrush" Value="#4084a3"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Dark"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="BorderBrush" Value="#5da1c0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Light"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="BorderBrush" Value="#89bbd1"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="White"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="BorderBrush" Value="#b6d5e2"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <!--Theming triggers for the IsChecked event, as well as the theme.-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Black"/>
                    <!--The condition for IsChecked couldn't be defined the simple way, so we need to use this convoluted Binding to access the property.-->
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsChecked}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#262626"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Dark"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsChecked}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#474747"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Light"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsChecked}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#ebebeb"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="White"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsChecked}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#ffffff"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

        </Style.Triggers>

    </Style>

    <Style x:Key="StylisedButton"
           TargetType="Button">

        <Style.Setters>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="5">

                            <TextBlock Text="{TemplateBinding Property=Content}"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center"
                                       FontSize="16"
                                       FontWeight="Bold"
                                       Padding="{TemplateBinding Padding}"
                                       Foreground="{TemplateBinding Foreground}"/>

                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Setter Property="Foreground" Value="#b8b8b8"/>
            <Setter Property="Background">
                <Setter.Value>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                        <GradientStop Color="#474747" Offset="0"/>
                        <GradientStop Color="#3d3d3d" Offset="0.8"/>
                        <GradientStop Color="#5da1c0" Offset="2"/>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
            <Setter Property="BorderBrush" Value="#5da1c0"/>
            <Setter Property="BorderThickness" Value="1"/>
        </Style.Setters>

        <Style.Triggers>

            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Foreground" Value="#c6c6c6"/>
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                            <GradientStop Color="#262626" Offset="0"/>
                            <GradientStop Color="#1e1e1e" Offset="0.8"/>
                            <GradientStop Color="#4084a3" Offset="2"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderBrush" Value="#4084a3"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Foreground" Value="#b8b8b8"/>
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                            <GradientStop Color="#474747" Offset="0"/>
                            <GradientStop Color="#3d3d3d" Offset="0.8"/>
                            <GradientStop Color="#5da1c0" Offset="2"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderBrush" Value="#5da1c0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Foreground" Value="#1F1F1F"/>
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                            <GradientStop Color="#ebebeb" Offset="0"/>
                            <GradientStop Color="#e0e0e0" Offset="0.8"/>
                            <GradientStop Color="#89bbd1" Offset="2"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderBrush" Value="#89bbd1"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Foreground" Value="#0A0A0A"/>
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                            <GradientStop Color="#ffffff" Offset="0"/>
                            <GradientStop Color="#f5f5f5" Offset="0.8"/>
                            <GradientStop Color="#b6d5e2" Offset="2"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderBrush" Value="#b6d5e2"/>
            </DataTrigger>

            <!--Theming triggers for the IsMouseOver event, as well as the theme.-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Black"/>
                    <!--The condition for IsMouseOver couldn't be defined the simple way, so we need to use this convoluted Binding to access the property.-->
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                                <GradientStop Color="#262626" Offset="0"/>
                                <GradientStop Color="#1e1e1e" Offset="0.2"/>
                                <GradientStop Color="#4084a3" Offset="2"/>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Dark"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                                <GradientStop Color="#474747" Offset="0"/>
                                <GradientStop Color="#3d3d3d" Offset="0.2"/>
                                <GradientStop Color="#5da1c0" Offset="2"/>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Light"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                                <GradientStop Color="#ebebeb" Offset="0"/>
                                <GradientStop Color="#e0e0e0" Offset="0.2"/>
                                <GradientStop Color="#89bbd1" Offset="2"/>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="White"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                                <GradientStop Color="#ffffff" Offset="0"/>
                                <GradientStop Color="#f5f5f5" Offset="0.2"/>
                                <GradientStop Color="#b6d5e2" Offset="1"/>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <!--Theming triggers for the IsPressed event, as well as the theme.-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Black"/>
                    <!--The condition for IsPressed couldn't be defined the simple way, so we need to use this convoluted Binding to access the property.-->
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsPressed}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#4084a3"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Dark"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsPressed}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#5da1c0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Light"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsPressed}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#89bbd1"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="White"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsPressed}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#b6d5e2"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

        </Style.Triggers>

    </Style>

</ResourceDictionary>