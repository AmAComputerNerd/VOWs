<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!--Theme Pallette:
        - Black: https://coolors.co/palette/262626-1e1e1e-dddddd-c6c6c6-4084a3
        - Dark: https://coolors.co/palette/474747-3d3d3d-cccccc-b8b8b8-5da1c0 
        - Light: https://coolors.co/palette/ebebeb-e0e0e0-333333-1f1f1f-89bbd1
        - White: https://coolors.co/palette/ffffff-f5f5f5-141414-0a0a0a-b6d5e2
    -->

    <!--A janky fix for the Button TextBlock TextWrapping bug - should apply to every TextBox here.-->
    <Style TargetType="TextBlock">

        <Setter Property="TextWrapping" Value="NoWrap"/>

        <Style.Triggers>
            <!--Triggers relating to Large Text Size option.-->
            <DataTrigger Binding="{Binding Globals.UseLargeText}" Value="true">
                <Setter Property="TextWrapping" Value="Wrap"/>
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="ThemedBorder"
           TargetType="Border">

        <Style.Setters>
            <Setter Property="Background" Value="#3d3d3d"/>
            <Setter Property="BorderBrush" Value="#474747"/>
            <Setter Property="BorderThickness" Value="0"/>
        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Background" Value="#1e1e1e"/>
                <Setter Property="BorderBrush" Value="#262626"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Background" Value="#3d3d3d"/>
                <Setter Property="BorderBrush" Value="#474747"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Background" Value="#e0e0e0"/>
                <Setter Property="BorderBrush" Value="#ebebeb"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Background" Value="#f5f5f5"/>
                <Setter Property="BorderBrush" Value="#ffffff"/>
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="StylisedBorder"
           TargetType="Border">

        <Style.Setters>
            <Setter Property="Background" Value="#474747"/>
            <Setter Property="BorderBrush" Value="{Binding Globals.Accent}"/>
            <Setter Property="BorderThickness" Value="1"/>
        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Background" Value="#262626"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Background" Value="#474747"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Background" Value="#ebebeb"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Background" Value="#ffffff"/>
            </DataTrigger>
        </Style.Triggers>

    </Style>
    
    <Style x:Key="ThemedGrid"
           TargetType="Grid">

        <Style.Setters>
            <Setter Property="Background" Value="#3d3d3d"/>
        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Background" Value="#1e1e1e"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Background" Value="#3d3d3d"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Background" Value="#e0e0e0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Background" Value="#f5f5f5"/>
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="ThemedPanel"
           TargetType="StackPanel">

        <Style.Setters>
            <Setter Property="Background" Value="#3d3d3d"/>
        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Background" Value="#1e1e1e"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Background" Value="#3d3d3d"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Background" Value="#e0e0e0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Background" Value="#f5f5f5"/>
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="ThemedShape"
           TargetType="{x:Type Shape}">

        <Style.Setters>
            <Setter Property="Fill" Value="#3d3d3d"/>
            <Setter Property="Stroke" Value="#474747"/>
        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Fill" Value="#1e1e1e"/>
                <Setter Property="Stroke" Value="#262626"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Fill" Value="#3d3d3d"/>
                <Setter Property="Stroke" Value="#474747"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Fill" Value="#ebebeb"/>
                <Setter Property="Stroke" Value="#e0e0e0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Fill" Value="#ffffff"/>
                <Setter Property="Stroke" Value="#f5f5f5"/>
            </DataTrigger>
        </Style.Triggers>
        
    </Style>

    <Style x:Key="InvertedShape"
           TargetType="{x:Type Shape}">

        <Style.Setters>
            <Setter Property="Fill" Value="#e0e0e0"/>
            <Setter Property="Stroke" Value="#ebebeb"/>
        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Fill" Value="#f5f5f5"/>
                <Setter Property="Stroke" Value="#ffffff"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Fill" Value="#e0e0e0"/>
                <Setter Property="Stroke" Value="#ebebeb"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Fill" Value="#474747"/>
                <Setter Property="Stroke" Value="#3d3d3d"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Fill" Value="#262626"/>
                <Setter Property="Stroke" Value="#1e1e1e"/>
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="AccentedShape"
           TargetType="{x:Type Shape}">

        <Style.Setters>
            <Setter Property="Fill" Value="{Binding Globals.Accent}"/>
            <Setter Property="Stroke" Value="#3d3d3d"/>
        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Stroke" Value="#1e1e1e"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Stroke" Value="#3d3d3d"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Stroke" Value="#e0e0e0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Stroke" Value="#f5f5f5"/>
            </DataTrigger>
        </Style.Triggers>

    </Style>
    
    <Style x:Key="WinNavigationButton"
           BasedOn="{StaticResource {x:Type Button}}"
           TargetType="{x:Type Button}">

        <Style.Setters>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid VerticalAlignment="Top"
                              HorizontalAlignment="Center"
                              Background="{TemplateBinding Background}">

                            <TextBlock Text="{TemplateBinding Property=Content}"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center"
                                       FontWeight="Bold"/>

                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Setter Property="Width" Value="20"/>
            <Setter Property="Height" Value="20"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Foreground" Value="#cccccc"/>
            <Setter Property="Background" Value="Transparent"/>
        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Foreground" Value="#dddddd"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Foreground" Value="#cccccc"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Foreground" Value="#333333"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Foreground" Value="#141414"/>
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="TextTitle"
           TargetType="TextBlock">

        <Style.Setters>
            <Setter Property="Foreground" Value="#cccccc"/>
            <Setter Property="TextWrapping" Value="Wrap"/>
            <Setter Property="FontSize" Value="28"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="Margin" Value="0,0,0,20"/>
        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Foreground" Value="#dddddd"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Foreground" Value="#cccccc"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Foreground" Value="#333333"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Foreground" Value="#141414"/>
            </DataTrigger>
            
            <!--Triggers relating to Large Text Size option.-->
            <DataTrigger Binding="{Binding Globals.UseLargeText}" Value="true">
                <Setter Property="FontSize" Value="42"/>
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="TextSubtitle"
           TargetType="TextBlock">

        <Style.Setters>
            <Setter Property="Foreground" Value="#cccccc"/>
            <Setter Property="TextWrapping" Value="Wrap"/>
            <Setter Property="FontSize" Value="20"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="Margin" Value="0,0,0,10"/>
        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Foreground" Value="#dddddd"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Foreground" Value="#cccccc"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Foreground" Value="#333333"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Foreground" Value="#141414"/>
            </DataTrigger>

            <!--Triggers relating to Large Text Size option.-->
            <DataTrigger Binding="{Binding Globals.UseLargeText}" Value="true">
                <Setter Property="FontSize" Value="30"/>
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="Text"
           TargetType="TextBlock">

        <Style.Setters>
            <Setter Property="Foreground" Value="#b8b8b8"/>
            <Setter Property="TextWrapping" Value="Wrap"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="Margin" Value="0,0,0,5"/>
        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Foreground" Value="#c6c6c6"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Foreground" Value="#b8b8b8"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Foreground" Value="#1f1f1f"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Foreground" Value="#0a0a0a"/>
            </DataTrigger>

            <!--Triggers relating to Large Text Size option.-->
            <DataTrigger Binding="{Binding Globals.UseLargeText}" Value="true">
                <Setter Property="FontSize" Value="21"/>
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="Text_Hyperlink"
           TargetType="Hyperlink">

        <Style.Setters>
            <Setter Property="Foreground" Value="#b8b8b8"/>
            <Setter Property="FontSize" Value="14"/>
        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Foreground" Value="#c6c6c6"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Foreground" Value="#b8b8b8"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Foreground" Value="#1f1f1f"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Foreground" Value="#0a0a0a"/>
            </DataTrigger>

            <!--Triggers relating to Large Text Size option.-->
            <DataTrigger Binding="{Binding Globals.UseLargeText}" Value="true">
                <Setter Property="FontSize" Value="21"/>
            </DataTrigger>
        </Style.Triggers>

    </Style>
    
    <Style x:Key="UserInput"
           TargetType="TextBox">

        <Style.Setters>
            <Setter Property="Background" Value="#474747"/>
            <Setter Property="Foreground" Value="#b8b8b8"/>
            <Setter Property="BorderBrush" Value="{Binding Globals.Accent}"/>
            <Setter Property="TextWrapping" Value="Wrap"/>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Background" Value="#262626"/>
                <Setter Property="Foreground" Value="#c6c6c6"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Background" Value="#474747"/>
                <Setter Property="Foreground" Value="#b8b8b8"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Background" Value="#ebebeb"/>
                <Setter Property="Foreground" Value="#1f1f1f"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Background" Value="#ffffff"/>
                <Setter Property="Foreground" Value="#0a0a0a"/>
            </DataTrigger>

            <!--Triggers relating to Large Text Size option.-->
            <DataTrigger Binding="{Binding Globals.UseLargeText}" Value="true">
                <Setter Property="FontSize" Value="18"/>
            </DataTrigger>
        </Style.Triggers>
        
    </Style>

    <Style x:Key="StylisedComboBox"
           TargetType="ComboBox">
        <Style.Setters>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ComboBox">
                        <Border Background="Transparent"
                                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}">

                            <Grid Margin="5,2"
                                  HorizontalAlignment="Right">

                                <ToggleButton x:Name="ToggleButton"
                                              Focusable="False"
                                              IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                              ClickMode="Press"
                                              OverridesDefaultStyle="True">
                                    <ToggleButton.Template>
                                        <ControlTemplate TargetType="ToggleButton">
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition/>
                                                    <ColumnDefinition Width="20"/>
                                                </Grid.ColumnDefinitions>

                                                <Border x:Name="Border"
                                                        Grid.ColumnSpan="2"
                                                        Background="{TemplateBinding Background}"
                                                        BorderThickness="1">
                                                    <Border.BorderBrush>
                                                        <VisualBrush>
                                                            <VisualBrush.Visual>
                                                                <Rectangle StrokeDashArray="2,1" Stroke="{Binding RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Path=BorderBrush}" StrokeThickness="1"
                                                                           Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type Border}}, Path=ActualWidth}"
                                                                           Height="{Binding RelativeSource={RelativeSource AncestorType={x:Type TextBox}}, Path=ActualHeight}"/>
                                                            </VisualBrush.Visual>
                                                        </VisualBrush>
                                                    </Border.BorderBrush>
                                                </Border>

                                                <Border Margin="1,0"
                                                        Background="Transparent"/>

                                                <Path x:Name="Arrow"
                                                      Grid.Column="1"
                                                      Fill="{Binding Globals.Accent}"
                                                      HorizontalAlignment="Center" VerticalAlignment="Center"
                                                      Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"/>
                                            </Grid>
                                        </ControlTemplate>
                                    </ToggleButton.Template>
                                </ToggleButton>

                                <!--I can't tell you why this works, but the spacing breaks without both Padding and Margin.-->
                                <!--Please do not remove.-->
                                <Border Padding="3,0,10,0"
                                        Margin="3,0,10,0">
                                    <ContentPresenter x:Name="ContentSite"
                                                      IsHitTestVisible="False"
                                                      Content="{TemplateBinding SelectionBoxItem}"
                                                      ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                                      HorizontalAlignment="Left" VerticalAlignment="Center"/>
                                </Border>

                                <!--Same thing applies for the EditableTextBox - DO NOT TOUCH PADDING OR MARGIN!-->
                                <TextBox x:Name="PART_EditableTextBox"
                                         Style="{x:Null}"
                                         Margin="3,0,10,0" Padding="3,0,10,0"
                                         HorizontalAlignment="Left" VerticalAlignment="Center"
                                         Focusable="True"
                                         Background="Transparent" Foreground="{TemplateBinding Foreground}"
                                         CaretBrush="{TemplateBinding Foreground}"
                                         BorderThickness="0"
                                         Visibility="Collapsed"
                                         IsReadOnly="{TemplateBinding IsReadOnly}"/>

                                <Popup x:Name="Popup"
                                       Placement="Bottom"
                                       IsOpen="{TemplateBinding IsDropDownOpen}"
                                       AllowsTransparency="True"
                                       Focusable="False"
                                       PopupAnimation="Slide">
                                    <Grid x:Name="DropDown"
                                          SnapsToDevicePixels="True"
                                          MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                        <Border x:Name="DropDownBorder"
                                                Background="{TemplateBinding Background}"
                                                BorderThickness="1">
                                            <Border.BorderBrush>
                                                <VisualBrush>
                                                    <VisualBrush.Visual>
                                                        <Rectangle StrokeDashArray="2,1" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1"
                                                                   Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type Border}}, Path=ActualWidth}"
                                                                   Height="{Binding RelativeSource={RelativeSource AncestorType={x:Type TextBox}}, Path=ActualHeight}"/>
                                                    </VisualBrush.Visual>
                                                </VisualBrush>
                                            </Border.BorderBrush>
                                        </Border>
                                        <ScrollViewer Margin="4,6,4,6"
                                                      SnapsToDevicePixels="True">
                                            <StackPanel IsItemsHost="True"
                                                        KeyboardNavigation.DirectionalNavigation="Contained" />
                                        </ScrollViewer>
                                    </Grid>
                                </Popup>

                            </Grid>

                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasItems" Value="false">
                                <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="BorderBrush" Value="#888888"/>
                            </Trigger>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                            </Trigger>
                            <Trigger SourceName="Popup" Property="AllowsTransparency" Value="true">
                                <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0"/>
                                <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                            </Trigger>
                            <Trigger Property="IsEditable" Value="True">
                                <Setter Property="IsTabStop" Value="False"/>
                                <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="ContentSite" Property="Visibility" Value="Collapsed"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Setter Property="Background" Value="#474747"/>
            <Setter Property="Foreground" Value="#cccccc"/>
            <Setter Property="BorderBrush" Value="{Binding Globals.Accent}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="MinHeight" Value="20"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Background" Value="#262626"/>
                <Setter Property="Foreground" Value="#dddddd"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Background" Value="#474747"/>
                <Setter Property="Foreground" Value="#cccccc"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Background" Value="#ebebeb"/>
                <Setter Property="Foreground" Value="#333333"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Background" Value="#ffffff"/>
                <Setter Property="Foreground" Value="#141414"/>
            </DataTrigger>
        </Style.Triggers>

    </Style>
    
    <Style x:Key="MenuButton"
           TargetType="Button">

        <Style.Setters>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid VerticalAlignment="Stretch"
                              HorizontalAlignment="Stretch"
                              Background="{TemplateBinding Background}">

                            <TextBlock Text="{TemplateBinding Content}"
                                       FontSize="{TemplateBinding FontSize}"
                                       VerticalAlignment="Center"
                                       Margin="50,0,0,0"/>

                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Setter Property="Foreground" Value="#cccccc"/>
            <Setter Property="Background" Value="#3d3d3d"/>
            <Setter Property="BorderBrush" Value="#3d3d3d"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="FontSize" Value="11"/>

        </Style.Setters>

        <Style.Triggers>

            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Background" Value="#1e1e1e"/>
                <Setter Property="Foreground" Value="#dddddd"/>
                <Setter Property="BorderBrush" Value="#1e1e1e"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Background" Value="#3d3d3d"/>
                <Setter Property="Foreground" Value="#cccccc"/>
                <Setter Property="BorderBrush" Value="#3d3d3d"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Background" Value="#e0e0e0"/>
                <Setter Property="Foreground" Value="#333333"/>
                <Setter Property="BorderBrush" Value="#e0e0e0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Background" Value="#f5f5f5"/>
                <Setter Property="Foreground" Value="#141414"/>
                <Setter Property="BorderBrush" Value="#f5f5f5"/>
            </DataTrigger>

            <!--Theming triggers for the IsMouseOver event.-->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{Binding Globals.Accent}"/>
            </Trigger>

            <!--Theming triggers for the IsPressed event, as well as the theme.-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Black"/>
                    <!--The condition for IsPressed couldn't be defined the simple way, so we need to use this convoluted Binding to access the property.-->
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsPressed}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#262626"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Dark"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsPressed}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#474747"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Light"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsPressed}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#ebebeb"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="White"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsPressed}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#ffffff"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <!--Triggers relating to Large Text Size option.-->
            <DataTrigger Binding="{Binding Globals.UseLargeText}" Value="true">
                <Setter Property="FontSize" Value="16"/>
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="MenuButtonSticky"
           BasedOn="{StaticResource {x:Type ToggleButton}}"
           TargetType="RadioButton">

        <Style.Setters>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RadioButton">
                        <Grid VerticalAlignment="Stretch"
                              HorizontalAlignment="Stretch"
                              Background="{TemplateBinding Background}">

                            <TextBlock Text="{TemplateBinding Content}"
                                       FontSize="{TemplateBinding FontSize}"
                                       VerticalAlignment="Center"
                                       Margin="50,0,0,0"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Setter Property="Foreground" Value="#cccccc"/>
            <Setter Property="Background" Value="#474747"/>
            <Setter Property="BorderBrush" Value="#3d3d3d"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="FontSize" Value="11"/>

        </Style.Setters>

        <Style.Triggers>

            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Background" Value="#1e1e1e"/>
                <Setter Property="Foreground" Value="#dddddd"/>
                <Setter Property="BorderBrush" Value="#1e1e1e"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Background" Value="#3d3d3d"/>
                <Setter Property="Foreground" Value="#cccccc"/>
                <Setter Property="BorderBrush" Value="#3d3d3d"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Background" Value="#e0e0e0"/>
                <Setter Property="Foreground" Value="#333333"/>
                <Setter Property="BorderBrush" Value="#e0e0e0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Background" Value="#f5f5f5"/>
                <Setter Property="Foreground" Value="#141414"/>
                <Setter Property="BorderBrush" Value="#f5f5f5"/>
            </DataTrigger>

            <!--Theming triggers for the IsMouseOver event, as well as the theme.-->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{Binding Globals.Accent}"/>
            </Trigger>

            <!--Theming triggers for the IsChecked event, as well as the theme.-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Black"/>
                    <!--The condition for IsChecked couldn't be defined the simple way, so we need to use this convoluted Binding to access the property.-->
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsChecked}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#262626"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Dark"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsChecked}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#474747"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Light"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsChecked}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#ebebeb"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="White"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsChecked}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#ffffff"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <!--Triggers relating to Large Text Size option.-->
            <DataTrigger Binding="{Binding Globals.UseLargeText}" Value="true">
                <Setter Property="FontSize" Value="16"/>
            </DataTrigger>

        </Style.Triggers>

    </Style>

    <Style x:Key="MenuButtonToggle"
           TargetType="ToggleButton">

        <Style.Setters>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Grid VerticalAlignment="Stretch"
                              HorizontalAlignment="Stretch"
                              Background="{TemplateBinding Background}">

                            <TextBlock Text="{TemplateBinding Content}"
                                       FontSize="{TemplateBinding FontSize}"
                                       VerticalAlignment="Center"
                                       Margin="50,0,0,0"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Setter Property="Foreground" Value="#cccccc"/>
            <Setter Property="Background" Value="#474747"/>
            <Setter Property="BorderBrush" Value="#3d3d3d"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="FontSize" Value="11"/>

        </Style.Setters>

        <Style.Triggers>

            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Background" Value="#1e1e1e"/>
                <Setter Property="Foreground" Value="#dddddd"/>
                <Setter Property="BorderBrush" Value="#1e1e1e"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Background" Value="#3d3d3d"/>
                <Setter Property="Foreground" Value="#cccccc"/>
                <Setter Property="BorderBrush" Value="#3d3d3d"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Background" Value="#e0e0e0"/>
                <Setter Property="Foreground" Value="#333333"/>
                <Setter Property="BorderBrush" Value="#e0e0e0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Background" Value="#f5f5f5"/>
                <Setter Property="Foreground" Value="#141414"/>
                <Setter Property="BorderBrush" Value="#f5f5f5"/>
            </DataTrigger>

            <!--Theming triggers for the IsMouseOver event, as well as the theme.-->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{Binding Globals.Accent}"/>
            </Trigger>

            <!--Theming triggers for the IsChecked event, as well as the theme.-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Black"/>
                    <!--The condition for IsChecked couldn't be defined the simple way, so we need to use this convoluted Binding to access the property.-->
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsChecked}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#262626"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Dark"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsChecked}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#474747"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Light"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsChecked}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#ebebeb"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="White"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsChecked}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#ffffff"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <!--Triggers relating to Large Text Size option.-->
            <DataTrigger Binding="{Binding Globals.UseLargeText}" Value="true">
                <Setter Property="FontSize" Value="16"/>
            </DataTrigger>

        </Style.Triggers>

    </Style>
    
    <Style x:Key="StylisedButton"
           TargetType="Button">

        <Style.Setters>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="5">

                            <TextBlock Text="{TemplateBinding Content}"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center"
                                       FontSize="{TemplateBinding FontSize}"
                                       FontWeight="Bold"
                                       Padding="{TemplateBinding Padding}"
                                       Foreground="{TemplateBinding Foreground}"/>

                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Setter Property="Foreground" Value="#b8b8b8"/>
            <Setter Property="Background">
                <Setter.Value>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                        <GradientStop Color="#474747" Offset="0"/>
                        <GradientStop Color="#3d3d3d" Offset="0.8"/>
                        <GradientStop Color="{Binding Globals.Accent}" Offset="2"/>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
            <Setter Property="BorderBrush" Value="{Binding Globals.Accent}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="FontSize" Value="16"/>
        </Style.Setters>

        <Style.Triggers>

            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Foreground" Value="#c6c6c6"/>
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                            <GradientStop Color="#262626" Offset="0"/>
                            <GradientStop Color="#1e1e1e" Offset="0.8"/>
                            <GradientStop Color="{Binding Globals.Accent}" Offset="2"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Foreground" Value="#b8b8b8"/>
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                            <GradientStop Color="#474747" Offset="0"/>
                            <GradientStop Color="#3d3d3d" Offset="0.8"/>
                            <GradientStop Color="{Binding Globals.Accent}" Offset="2"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Foreground" Value="#1F1F1F"/>
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                            <GradientStop Color="#ebebeb" Offset="0"/>
                            <GradientStop Color="#e0e0e0" Offset="0.8"/>
                            <GradientStop Color="{Binding Globals.Accent}" Offset="2"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Foreground" Value="#0A0A0A"/>
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                            <GradientStop Color="#ffffff" Offset="0"/>
                            <GradientStop Color="#f5f5f5" Offset="0.8"/>
                            <GradientStop Color="{Binding Globals.Accent}" Offset="2"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <!--Theming triggers for the IsMouseOver event, as well as the theme.-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Black"/>
                    <!--The condition for IsMouseOver couldn't be defined the simple way, so we need to use this convoluted Binding to access the property.-->
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                                <GradientStop Color="#262626" Offset="0"/>
                                <GradientStop Color="#1e1e1e" Offset="0.2"/>
                                <GradientStop Color="{Binding Globals.Accent}" Offset="2"/>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Dark"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                                <GradientStop Color="#474747" Offset="0"/>
                                <GradientStop Color="#3d3d3d" Offset="0.2"/>
                                <GradientStop Color="{Binding Globals.Accent}" Offset="2"/>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Light"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                                <GradientStop Color="#ebebeb" Offset="0"/>
                                <GradientStop Color="#e0e0e0" Offset="0.2"/>
                                <GradientStop Color="{Binding Globals.Accent}" Offset="2"/>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="White"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                                <GradientStop Color="#ffffff" Offset="0"/>
                                <GradientStop Color="#f5f5f5" Offset="0.2"/>
                                <GradientStop Color="{Binding Globals.Accent}" Offset="1"/>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <!--Theming triggers for the IsPressed event, as well as the theme.-->
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{Binding Globals.Accent}"/>
            </Trigger>

            <!--Triggers relating to Large Text Size option.-->
            <DataTrigger Binding="{Binding Globals.UseLargeText}" Value="true">
                <Setter Property="FontSize" Value="24"/>
            </DataTrigger>

        </Style.Triggers>

    </Style>

    <Style x:Key="StylisedButtonSticky"
           BasedOn="{StaticResource {x:Type ToggleButton}}"
           TargetType="RadioButton">

        <Style.Setters>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RadioButton">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">

                            <TextBlock Text="{TemplateBinding Property=Content}"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center"
                                       FontSize="{TemplateBinding FontSize}"
                                       FontWeight="Bold"
                                       Padding="{TemplateBinding Padding}"
                                       Foreground="{TemplateBinding Foreground}"/>

                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Setter Property="Foreground" Value="#b8b8b8"/>
            <Setter Property="Background">
                <Setter.Value>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                        <GradientStop Color="#474747" Offset="0"/>
                        <GradientStop Color="#3d3d3d" Offset="0.8"/>
                        <GradientStop Color="{Binding Globals.Accent}" Offset="2"/>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
            <Setter Property="BorderBrush" Value="{Binding Globals.Accent}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="FontSize" Value="16"/>
        </Style.Setters>

        <Style.Triggers>

            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Foreground" Value="#c6c6c6"/>
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                            <GradientStop Color="#262626" Offset="0"/>
                            <GradientStop Color="#1e1e1e" Offset="0.8"/>
                            <GradientStop Color="{Binding Globals.Accent}" Offset="2"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Foreground" Value="#b8b8b8"/>
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                            <GradientStop Color="#474747" Offset="0"/>
                            <GradientStop Color="#3d3d3d" Offset="0.8"/>
                            <GradientStop Color="{Binding Globals.Accent}" Offset="2"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Foreground" Value="#1F1F1F"/>
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                            <GradientStop Color="#ebebeb" Offset="0"/>
                            <GradientStop Color="#e0e0e0" Offset="0.8"/>
                            <GradientStop Color="{Binding Globals.Accent}" Offset="2"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Foreground" Value="#0A0A0A"/>
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                            <GradientStop Color="#ffffff" Offset="0"/>
                            <GradientStop Color="#f5f5f5" Offset="0.8"/>
                            <GradientStop Color="{Binding Globals.Accent}" Offset="2"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <!--Theming triggers for the IsMouseOver event, as well as the theme.-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Black"/>
                    <!--The condition for IsMouseOver couldn't be defined the simple way, so we need to use this convoluted Binding to access the property.-->
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                                <GradientStop Color="#262626" Offset="0"/>
                                <GradientStop Color="#1e1e1e" Offset="0.2"/>
                                <GradientStop Color="{Binding Globals.Accent}" Offset="2"/>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Dark"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                                <GradientStop Color="#474747" Offset="0"/>
                                <GradientStop Color="#3d3d3d" Offset="0.2"/>
                                <GradientStop Color="{Binding Globals.Accent}" Offset="2"/>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Light"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                                <GradientStop Color="#ebebeb" Offset="0"/>
                                <GradientStop Color="#e0e0e0" Offset="0.2"/>
                                <GradientStop Color="{Binding Globals.Accent}" Offset="2"/>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="White"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                                <GradientStop Color="#ffffff" Offset="0"/>
                                <GradientStop Color="#f5f5f5" Offset="0.2"/>
                                <GradientStop Color="{Binding Globals.Accent}" Offset="1"/>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <!--Theming triggers for the IsChecked event, as well as the theme.-->
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{Binding Globals.Accent}"/>
            </Trigger>

            <!--Triggers relating to Large Text Size option.-->
            <DataTrigger Binding="{Binding Globals.UseLargeText}" Value="true">
                <Setter Property="FontSize" Value="24"/>
            </DataTrigger>

        </Style.Triggers>

    </Style>

    <Style x:Key="StylisedButtonToggle"
           TargetType="ToggleButton">

        <Style.Setters>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">

                            <TextBlock Text="{TemplateBinding Property=Content}"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center"
                                       FontSize="{TemplateBinding FontSize}"
                                       FontWeight="Bold"
                                       Padding="{TemplateBinding Padding}"
                                       Foreground="{TemplateBinding Foreground}"/>

                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Setter Property="Foreground" Value="#b8b8b8"/>
            <Setter Property="Background">
                <Setter.Value>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                        <GradientStop Color="#474747" Offset="0"/>
                        <GradientStop Color="#3d3d3d" Offset="0.8"/>
                        <GradientStop Color="{Binding Globals.Accent}" Offset="2"/>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
            <Setter Property="BorderBrush" Value="{Binding Globals.Accent}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="FontSize" Value="16"/>
        </Style.Setters>

        <Style.Triggers>

            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Foreground" Value="#c6c6c6"/>
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                            <GradientStop Color="#262626" Offset="0"/>
                            <GradientStop Color="#1e1e1e" Offset="0.8"/>
                            <GradientStop Color="{Binding Globals.Accent}" Offset="2"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Foreground" Value="#b8b8b8"/>
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                            <GradientStop Color="#474747" Offset="0"/>
                            <GradientStop Color="#3d3d3d" Offset="0.8"/>
                            <GradientStop Color="{Binding Globals.Accent}" Offset="2"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Foreground" Value="#1F1F1F"/>
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                            <GradientStop Color="#ebebeb" Offset="0"/>
                            <GradientStop Color="#e0e0e0" Offset="0.8"/>
                            <GradientStop Color="{Binding Globals.Accent}" Offset="2"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Foreground" Value="#0A0A0A"/>
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                            <GradientStop Color="#ffffff" Offset="0"/>
                            <GradientStop Color="#f5f5f5" Offset="0.8"/>
                            <GradientStop Color="{Binding Globals.Accent}" Offset="2"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <!--Theming triggers for the IsMouseOver event, as well as the theme.-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Black"/>
                    <!--The condition for IsMouseOver couldn't be defined the simple way, so we need to use this convoluted Binding to access the property.-->
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                                <GradientStop Color="#262626" Offset="0"/>
                                <GradientStop Color="#1e1e1e" Offset="0.2"/>
                                <GradientStop Color="{Binding Globals.Accent}" Offset="2"/>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Dark"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                                <GradientStop Color="#474747" Offset="0"/>
                                <GradientStop Color="#3d3d3d" Offset="0.2"/>
                                <GradientStop Color="{Binding Globals.Accent}" Offset="2"/>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Light"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                                <GradientStop Color="#ebebeb" Offset="0"/>
                                <GradientStop Color="#e0e0e0" Offset="0.2"/>
                                <GradientStop Color="{Binding Globals.Accent}" Offset="2"/>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="White"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                                <GradientStop Color="#ffffff" Offset="0"/>
                                <GradientStop Color="#f5f5f5" Offset="0.2"/>
                                <GradientStop Color="{Binding Globals.Accent}" Offset="1"/>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <!--Theming triggers for the IsChecked event, as well as the theme.-->
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{Binding Globals.Accent}"/>
            </Trigger>

            <!--Triggers relating to Large Text Size option.-->
            <DataTrigger Binding="{Binding Globals.UseLargeText}" Value="true">
                <Setter Property="FontSize" Value="24"/>
            </DataTrigger>

        </Style.Triggers>

    </Style>
    
    <Style x:Key="SimplisticButton"
           TargetType="Button">

        <Style.Setters>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">

                            <TextBlock Text="{TemplateBinding Property=Content}"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center"
                                       FontSize="{TemplateBinding FontSize}"
                                       Padding="{TemplateBinding Padding}"
                                       Foreground="{TemplateBinding Foreground}"/>

                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="#cccccc"/>
            <Setter Property="BorderBrush" Value="{Binding Globals.Accent}"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="FontSize" Value="11"/>
        </Style.Setters>

        <Style.Triggers>

            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Foreground" Value="#dddddd"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Foreground" Value="#cccccc"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Foreground" Value="#333333"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Foreground" Value="#141414"/>
            </DataTrigger>

            <!--Theming triggers for the IsMouseOver event, as well as the theme.-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Black"/>
                    <!--The condition for IsMouseOver couldn't be defined the simple way, so we need to use this convoluted Binding to access the property.-->
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                                <GradientStop Color="#262626" Offset="0"/>
                                <GradientStop Color="#1e1e1e" Offset="0.2"/>
                                <GradientStop Color="{Binding Globals.Accent}" Offset="2"/>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Dark"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                                <GradientStop Color="#474747" Offset="0"/>
                                <GradientStop Color="#3d3d3d" Offset="0.2"/>
                                <GradientStop Color="{Binding Globals.Accent}" Offset="2"/>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Light"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                                <GradientStop Color="#ebebeb" Offset="0"/>
                                <GradientStop Color="#e0e0e0" Offset="0.2"/>
                                <GradientStop Color="{Binding Globals.Accent}" Offset="2"/>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="White"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                                <GradientStop Color="#ffffff" Offset="0"/>
                                <GradientStop Color="#f5f5f5" Offset="0.2"/>
                                <GradientStop Color="{Binding Globals.Accent}" Offset="1"/>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <!--Theming triggers for the IsPressed event, as well as the theme.-->
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{Binding Globals.Accent}"/>
            </Trigger>

            <!--Triggers relating to Large Text Size option.-->
            <DataTrigger Binding="{Binding Globals.UseLargeText}" Value="true">
                <Setter Property="FontSize" Value="16"/>
            </DataTrigger>

        </Style.Triggers>
        
    </Style>

    <Style x:Key="SimplisticButtonSticky"
           BasedOn="{StaticResource {x:Type ToggleButton}}"
           TargetType="RadioButton">

        <Style.Setters>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RadioButton">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">

                            <TextBlock Text="{TemplateBinding Property=Content}"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center"
                                       FontSize="{TemplateBinding FontSize}"
                                       Padding="{TemplateBinding Padding}"
                                       Foreground="{TemplateBinding Foreground}"/>

                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            
            <Setter Property="Foreground" Value="#cccccc"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="{Binding Globals.Accent}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="FontSize" Value="11"/>
        </Style.Setters>

        <Style.Triggers>

            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Foreground" Value="#dddddd"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Foreground" Value="#cccccc"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Foreground" Value="#333333"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Foreground" Value="#141414"/>
            </DataTrigger>

            <!--Theming triggers for the IsMouseOver event, as well as the theme.-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Black"/>
                    <!--The condition for IsMouseOver couldn't be defined the simple way, so we need to use this convoluted Binding to access the property.-->
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                                <GradientStop Color="#262626" Offset="0"/>
                                <GradientStop Color="#1e1e1e" Offset="0.2"/>
                                <GradientStop Color="{Binding Globals.Accent}" Offset="2"/>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Dark"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                                <GradientStop Color="#474747" Offset="0"/>
                                <GradientStop Color="#3d3d3d" Offset="0.2"/>
                                <GradientStop Color="{Binding Globals.Accent}" Offset="2"/>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Light"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                                <GradientStop Color="#ebebeb" Offset="0"/>
                                <GradientStop Color="#e0e0e0" Offset="0.2"/>
                                <GradientStop Color="{Binding Globals.Accent}" Offset="2"/>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="White"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                                <GradientStop Color="#ffffff" Offset="0"/>
                                <GradientStop Color="#f5f5f5" Offset="0.2"/>
                                <GradientStop Color="{Binding Globals.Accent}" Offset="1"/>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <!--Theming triggers for the IsChecked event, as well as the theme.-->
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{Binding Globals.Accent}"/>
            </Trigger>

            <!--Triggers relating to Large Text Size option.-->
            <DataTrigger Binding="{Binding Globals.UseLargeText}" Value="true">
                <Setter Property="FontSize" Value="16"/>
            </DataTrigger>

        </Style.Triggers>

    </Style>

    <Style x:Key="SimplisticButtonToggle"
           TargetType="ToggleButton">

        <Style.Setters>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">

                            <TextBlock Text="{TemplateBinding Property=Content}"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center"
                                       FontSize="{TemplateBinding FontSize}"
                                       Padding="{TemplateBinding Padding}"
                                       Foreground="{TemplateBinding Foreground}"/>

                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Setter Property="Foreground" Value="#cccccc"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="{Binding Globals.Accent}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="FontSize" Value="11"/>
        </Style.Setters>

        <Style.Triggers>

            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Foreground" Value="#dddddd"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Foreground" Value="#cccccc"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Foreground" Value="#333333"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Foreground" Value="#141414"/>
            </DataTrigger>

            <!--Theming triggers for the IsMouseOver event, as well as the theme.-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Black"/>
                    <!--The condition for IsMouseOver couldn't be defined the simple way, so we need to use this convoluted Binding to access the property.-->
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                                <GradientStop Color="#262626" Offset="0"/>
                                <GradientStop Color="#1e1e1e" Offset="0.2"/>
                                <GradientStop Color="{Binding Globals.Accent}" Offset="2"/>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Dark"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                                <GradientStop Color="#474747" Offset="0"/>
                                <GradientStop Color="#3d3d3d" Offset="0.2"/>
                                <GradientStop Color="{Binding Globals.Accent}" Offset="2"/>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Light"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                                <GradientStop Color="#ebebeb" Offset="0"/>
                                <GradientStop Color="#e0e0e0" Offset="0.2"/>
                                <GradientStop Color="{Binding Globals.Accent}" Offset="2"/>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="White"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,2">
                                <GradientStop Color="#ffffff" Offset="0"/>
                                <GradientStop Color="#f5f5f5" Offset="0.2"/>
                                <GradientStop Color="{Binding Globals.Accent}" Offset="1"/>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <!--Theming triggers for the IsPressed event, as well as the theme.-->
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{Binding Globals.Accent}"/>
            </Trigger>

            <!--Triggers relating to Large Text Size option.-->
            <DataTrigger Binding="{Binding Globals.UseLargeText}" Value="true">
                <Setter Property="FontSize" Value="16"/>
            </DataTrigger>

        </Style.Triggers>

    </Style>

</ResourceDictionary>