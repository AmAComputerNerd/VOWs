<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!--Theme Pallette:
        - Black: https://coolors.co/palette/262626-1e1e1e-dddddd-c6c6c6-4084a3
        - Dark: https://coolors.co/palette/474747-3d3d3d-cccccc-b8b8b8-5da1c0 
        - Light: https://coolors.co/palette/ebebeb-e0e0e0-333333-1f1f1f-89bbd1
        - White: https://coolors.co/palette/ffffff-f5f5f5-141414-0a0a0a-b6d5e2
    --> 
    
    <Style x:Key="ThemedBorder"
           TargetType="Border">

        <Style.Setters>
            <Setter Property="Background" Value="#3d3d3d"/>
        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Background" Value="#1f1f1f"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Background" Value="#3d3d3d"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Background" Value="#e0e0e0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Background" Value="#ffffff"/>
            </DataTrigger>
        </Style.Triggers>
        
    </Style>

    <Style x:Key="ThemedGrid"
           TargetType="Grid">

        <Style.Setters>
            <Setter Property="Background" Value="#353b47"/>
        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Background" Value="#1f1f1f"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Background" Value="#3d3d3d"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Background" Value="#e0e0e0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Background" Value="#ffffff"/>
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="ThemedPanel"
           TargetType="StackPanel">

        <Style.Setters>
            <Setter Property="Background" Value="#353b47"/>
        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Background" Value="#1f1f1f"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Background" Value="#3d3d3d"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Background" Value="#e0e0e0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Background" Value="#ffffff"/>
            </DataTrigger>
        </Style.Triggers>

    </Style>
    
    <Style x:Key="FlatButton"
           TargetType="Button">

        <Style.Setters>

            <Setter Property="Background" Value="#333333"/>
            <Setter Property="Foreground" Value="#cccccc"/>
            <Setter Property="BorderBrush" Value="#5da1c0"/>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Margin="{TemplateBinding Margin}"
                                Padding="{TemplateBinding Padding}"
                                CornerRadius="5">

                            <ContentPresenter HorizontalAlignment="Center"
                                              VerticalAlignment="Center"
                                              Margin="10,0,10,0"/>

                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Background" Value="#141414"/>
                <Setter Property="Foreground" Value="#dddddd"/>
                <Setter Property="BorderBrush" Value="#4084A3"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Background" Value="#333333"/>
                <Setter Property="Foreground" Value="#cccccc"/>
                <Setter Property="BorderBrush" Value="#5da1c0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Background" Value="#d6d6d6"/>
                <Setter Property="Foreground" Value="#333333"/>
                <Setter Property="BorderBrush" Value="#89bbd1"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Background" Value="#f5f5f5"/>
                <Setter Property="Foreground" Value="#141414"/>
                <Setter Property="BorderBrush" Value="#b6d5e2"/>
            </DataTrigger>

            <!--Theming triggers for the IsMouseOver event, as well as the theme.-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Black"/>
                    <!--The condition for IsMouseOver couldn't be defined the simple way, so we need to use this convoluted Binding to access the property.-->
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#1b1b1b"/>
                    <Setter Property="Foreground" Value="#c6c6c6"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Dark"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#3a3a3a"/>
                    <Setter Property="Foreground" Value="#b8b8b8"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Light"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#dedede"/>
                    <Setter Property="Foreground" Value="#1f1f1f"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="White"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#ffffff"/>
                    <Setter Property="Foreground" Value="#0a0a0a"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <!--Theming triggers for the IsPressed event, as well as the theme.-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Black"/>
                    <!--The condition for IsPressed couldn't be defined the simple way, so we need to use this convoluted Binding to access the property.-->
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsPressed}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#0b0b0b"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Dark"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsPressed}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#2a2a2a"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Light"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsPressed}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#cecece"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="White"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsPressed}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#ededed"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="FlatToggleButton"
           TargetType="ToggleButton">

        <Style.Setters>

            <Setter Property="Background" Value="#333333"/>
            <Setter Property="Foreground" Value="#cccccc"/>
            <Setter Property="BorderBrush" Value="#5da1c0"/>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Margin="{TemplateBinding Margin}"
                                Padding="{TemplateBinding Padding}"
                                CornerRadius="5">

                            <ContentPresenter HorizontalAlignment="Center"
                                              VerticalAlignment="Center"/>

                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Background" Value="#141414"/>
                <Setter Property="Foreground" Value="#dddddd"/>
                <Setter Property="BorderBrush" Value="#4084A3"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Background" Value="#333333"/>
                <Setter Property="Foreground" Value="#cccccc"/>
                <Setter Property="BorderBrush" Value="#5da1c0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Background" Value="#d6d6d6"/>
                <Setter Property="Foreground" Value="#333333"/>
                <Setter Property="BorderBrush" Value="#89bbd1"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Background" Value="#f5f5f5"/>
                <Setter Property="Foreground" Value="#141414"/>
                <Setter Property="BorderBrush" Value="#b6d5e2"/>
            </DataTrigger>

            <!--Theming triggers for the IsMouseOver event, as well as the theme.-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Black"/>
                    <!--The condition for IsMouseOver couldn't be defined the simple way, so we need to use this convoluted Binding to access the property.-->
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#1b1b1b"/>
                    <Setter Property="Foreground" Value="#c6c6c6"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Dark"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#3a3a3a"/>
                    <Setter Property="Foreground" Value="#b8b8b8"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Light"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#dedede"/>
                    <Setter Property="Foreground" Value="#1f1f1f"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="White"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#ffffff"/>
                    <Setter Property="Foreground" Value="#0a0a0a"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <!--Theming triggers for the IsChecked event, as well as the theme.-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Black"/>
                    <!--The condition for IsChecked couldn't be defined the simple way, so we need to use this convoluted Binding to access the property.-->
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsChecked}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#0b0b0b"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Dark"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsChecked}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#2a2a2a"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Light"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsChecked}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#cecece"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="White"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsChecked}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#ededed"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </Style.Triggers>

    </Style>
    
    <Style x:Key="MinimalisticButton"
           TargetType="Button"
           BasedOn="{StaticResource FlatButton}">

        <Style.Setters>
            
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Margin="{TemplateBinding Margin}"
                                Padding="{TemplateBinding Padding}">

                            <StackPanel>
                                <ContentPresenter HorizontalAlignment="Center"
                                                  VerticalAlignment="Center"/>

                                <TextBlock Text="{TemplateBinding Tag}"
                                           Foreground="{TemplateBinding Foreground}"
                                           HorizontalAlignment="Center" VerticalAlignment="Bottom"/>
                            </StackPanel>

                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            
        </Style.Setters>
        
    </Style>

    <Style x:Key="MinimalisticToggleButton"
           TargetType="ToggleButton"
           BasedOn="{StaticResource FlatToggleButton}">

        <Style.Setters>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Margin="{TemplateBinding Margin}"
                                Padding="{TemplateBinding Padding}">

                            <StackPanel>
                                <ContentPresenter HorizontalAlignment="Center"
                                                  VerticalAlignment="Center"/>

                                <TextBlock Text="{TemplateBinding Tag}"
                                           Foreground="{TemplateBinding Foreground}"
                                           HorizontalAlignment="Center" VerticalAlignment="Bottom"/>
                            </StackPanel>

                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

        </Style.Setters>

    </Style>

</ResourceDictionary>