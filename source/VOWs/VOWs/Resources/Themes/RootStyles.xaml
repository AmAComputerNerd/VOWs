<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!--Theme Pallette:
        - Black: https://coolors.co/palette/262626-1e1e1e-dddddd-c6c6c6-4084a3
        - Dark: https://coolors.co/palette/474747-3d3d3d-cccccc-b8b8b8-5da1c0 
        - Light: https://coolors.co/palette/ebebeb-e0e0e0-333333-1f1f1f-89bbd1
        - White: https://coolors.co/palette/ffffff-f5f5f5-141414-0a0a0a-b6d5e2
    --> 
    
    <Style x:Key="ThemedBorder"
           TargetType="Border">

        <Style.Setters>
            <Setter Property="Background" Value="#3d3d3d"/>
        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Background" Value="#1e1e1e"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Background" Value="#3d3d3d"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Background" Value="#e0e0e0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Background" Value="#ffffff"/>
            </DataTrigger>
        </Style.Triggers>
        
    </Style>

    <Style x:Key="ThemedGrid"
           TargetType="Grid">

        <Style.Setters>
            <Setter Property="Background" Value="#3d3d3d"/>
        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Background" Value="#1e1e1e"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Background" Value="#3d3d3d"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Background" Value="#e0e0e0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Background" Value="#ffffff"/>
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="ThemedPanel"
           TargetType="StackPanel">

        <Style.Setters>
            <Setter Property="Background" Value="#3d3d3d"/>
        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Background" Value="#1e1e1e"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Background" Value="#3d3d3d"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Background" Value="#e0e0e0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Background" Value="#ffffff"/>
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <Style x:Key="ThemedTextBlock"
           TargetType="TextBlock">

        <Style.Setters>
            <Setter Property="Foreground" Value="#cccccc"/>
        </Style.Setters>
        
        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Foreground" Value="#dddddd"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Foreground" Value="#cccccc"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Foreground" Value="#333333"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Foreground" Value="#141414"/>
            </DataTrigger>
        </Style.Triggers>
        
    </Style>
    
    <Style x:Key="ThemedButton"
           TargetType="Button">

        <Style.Setters>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}">

                            <ContentPresenter Content="{TemplateBinding Content}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            
            <Setter Property="Background" Value="#474747"/>
            <Setter Property="Foreground" Value="#cccccc"/>
            <Setter Property="BorderBrush" Value="{Binding Globals.Accent}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Background" Value="#262626"/>
                <Setter Property="Foreground" Value="#dddddd"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Background" Value="#474747"/>
                <Setter Property="Foreground" Value="#cccccc"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Background" Value="#ebebeb"/>
                <Setter Property="Foreground" Value="#333333"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Background" Value="#ffffff"/>
                <Setter Property="Foreground" Value="#141414"/>
            </DataTrigger>

            <!--Theming triggers for the IsMouseOver event, as well as the theme.-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Black"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#1e1e1e"/>
                    <Setter Property="Foreground" Value="#c6c6c6"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Dark"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#3d3d3d"/>
                    <Setter Property="Foreground" Value="#b8b8b8"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Light"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#e0e0e0"/>
                    <Setter Property="Foreground" Value="#1f1f1f"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="White"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#f5f5f5"/>
                    <Setter Property="Foreground" Value="#0a0a0a"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            
        
            <!--Theming triggers for the IsPressed event.-->
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{Binding Globals.Accent}"/>
            </Trigger>
        </Style.Triggers>
        
    </Style>

    <Style x:Key="ThemedToggleButton"
           TargetType="ToggleButton">

        <Style.Setters>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <!--Yes... I'm using the FontSize property to represent my corner radius - get over it.-->
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}">

                            <ContentPresenter Content="{TemplateBinding Content}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <Setter Property="Background" Value="#474747"/>
            <Setter Property="Foreground" Value="#cccccc"/>
            <Setter Property="BorderBrush" Value="{Binding Globals.Accent}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Black">
                <Setter Property="Background" Value="#262626"/>
                <Setter Property="Foreground" Value="#dddddd"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Dark">
                <Setter Property="Background" Value="#474747"/>
                <Setter Property="Foreground" Value="#cccccc"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="Light">
                <Setter Property="Background" Value="#ebebeb"/>
                <Setter Property="Foreground" Value="#333333"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Globals.Theme}" Value="White">
                <Setter Property="Background" Value="#ffffff"/>
                <Setter Property="Foreground" Value="#141414"/>
            </DataTrigger>

            <!--Theming triggers for the IsMouseOver event, as well as the theme.-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Black"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#1e1e1e"/>
                    <Setter Property="Foreground" Value="#c6c6c6"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Dark"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#3d3d3d"/>
                    <Setter Property="Foreground" Value="#b8b8b8"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="Light"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#e0e0e0"/>
                    <Setter Property="Foreground" Value="#1f1f1f"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Globals.Theme}" Value="White"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#f5f5f5"/>
                    <Setter Property="Foreground" Value="#0a0a0a"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <!--Theming triggers for the IsChecked event.-->
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{Binding Globals.Accent}"/>
            </Trigger>
        </Style.Triggers>

    </Style>

</ResourceDictionary>