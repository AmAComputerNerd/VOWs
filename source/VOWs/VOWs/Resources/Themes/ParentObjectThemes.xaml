<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!--Parent style for a Themed Panel object.-->
    <Style x:Key="ThemedPanel" 
           TargetType="{x:Type Panel}">

        <Style.Setters>
            <!--Default values to show up in the XAML view, and to use as a backup if QuickSettings is not available for whatever reason.-->
            <Setter Property="Background" Value="#2F2F2F"/>
        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Storage.Theme}" Value="Dark">
                <Setter Property="Background" Value="#2F2F2F"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Storage.Theme}" Value="Light">
                <Setter Property="Background" Value="#D0D0D0"/>
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <!--Default style for a Themed Grid object.-->
    <Style TargetType="{x:Type Grid}"
           BasedOn="{StaticResource ThemedPanel}"/>

    <!--Default style for a Themed StackPanel object.-->
    <Style TargetType="{x:Type StackPanel}"
           BasedOn="{StaticResource ThemedPanel}"/>

    <!--Default style for a Themed Border object.-->
    <!--No parent style as Border is unique in it's inheritance tree.-->
    <Style TargetType="{x:Type Border}">

        <Style.Setters>
            <!--Default values to show up in the XAML view, and to use as a backup if QuickSettings is not available for whatever reason.-->
            <Setter Property="Background" Value="#2F2F2F"/>
        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding QuickStorage.Theme}" Value="Dark">
                <Setter Property="Background" Value="#2F2F2F"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding QuickStorage.Theme}" Value="Light">
                <Setter Property="Background" Value="#D0D0D0"/>
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <!--Parent style for a Themed Control object.-->
    <Style x:Key="ThemedControl"
           TargetType="Control">

        <Style.Setters>
            <!--Default values to show up in the XAML view, and to use as a backup if QuickSettings is not available for whatever reason.-->
            <Setter Property="Background" Value="#2F2F2F"/>
            <Setter Property="Foreground" Value="#C0C0C0"/>
            <Setter Property="BorderThickness" Value="0"/>
        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Storage.Theme}" Value="Dark">
                <Setter Property="Background" Value="#2F2F2F"/>
                <Setter Property="Foreground" Value="#C0C0C0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Storage.Theme}" Value="Light">
                <Setter Property="Background" Value="#D0D0D0"/>
                <Setter Property="Foreground" Value="#3F3F3F"/>
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <!--Default style for a Themed Button object.-->
    <Style TargetType="{x:Type Button}">

        <Style.Setters>
            <!--Template to override default Button hover and click properties. Also adds some extra flair, so that's neat.-->
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Margin="{TemplateBinding Margin}"
                                Padding="{TemplateBinding Padding}"
                                CornerRadius="5">

                            <TextBlock Text="{TemplateBinding Content}"
                                       Foreground="{TemplateBinding Foreground}"
                                       FontSize="14"
                                       HorizontalAlignment="Center" VerticalAlignment="Center"/>

                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style.Setters>

        <Style.Triggers>
            <!--Theming triggers. These are pretty long, annoyingly, because Trigger objects can't be nested.-->
            <!--Default theming triggers. Anything that changes based ONLY on the theme selected should go in here.-->
            <DataTrigger Binding="{Binding Storage.Theme}" Value="Dark">
                <Setter Property="Background" Value="#2A2A2A"/>
                <Setter Property="Foreground" Value="#C0C0C0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Storage.Theme}" Value="Light">
                <Setter Property="Background" Value="#D6D6D6"/>
                <Setter Property="Foreground" Value="#3F3F3F"/>
            </DataTrigger>

            <!--Theming triggers for the IsMouseOver event, as well as the theme.-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Storage.Theme}" Value="Dark"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#1f1f1f"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Storage.Theme}" Value="Light"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#E0E0E0"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <!--Theming triggers for the IsPressed event, as well as the theme.-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Storage.Theme}" Value="Dark"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsPressed}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#151515"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Storage.Theme}" Value="Light"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsPressed}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#EAEAEA"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </Style.Triggers>

    </Style>

</ResourceDictionary>